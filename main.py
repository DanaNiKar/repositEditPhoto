# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore
import cv2, imutils
import os
import time
from pathlib import Path
import numpy as np
from PyQt5.Qt import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from itertools import product
from copy import deepcopy


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(712, 609)
        MainWindow.setMaximumSize(QtCore.QSize(1500, 1500))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.groupBox_2)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_3 = QtWidgets.QLabel(self.groupBox_2)
        self.label_3.setObjectName("label_3")
        self.gridLayout_3.addWidget(self.label_3, 3, 1, 1, 1, QtCore.Qt.AlignBottom)
        self.label_2 = QtWidgets.QLabel(self.groupBox_2)
        self.label_2.setObjectName("label_2")
        self.gridLayout_3.addWidget(self.label_2, 3, 0, 1, 1, QtCore.Qt.AlignBottom)
        self.pbChangeImage = QtWidgets.QPushButton(self.groupBox_2)
        self.pbChangeImage.setObjectName("pbChangeImage")
        self.gridLayout_3.addWidget(self.pbChangeImage, 1, 0, 1, 2)
        self.pbImage = QtWidgets.QPushButton(self.groupBox_2)
        self.pbImage.setObjectName("pbImage")
        self.gridLayout_3.addWidget(self.pbImage, 0, 0, 1, 2)
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_3.addWidget(self.lineEdit, 4, 0, 1, 1)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout_3.addWidget(self.lineEdit_2, 4, 1, 1, 1)
        self.gridLayout_2.addWidget(self.groupBox_2, 0, 3, 1, 2)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setObjectName("groupBox_3")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.groupBox_3)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.pbWebCamera = QtWidgets.QPushButton(self.groupBox_3)
        self.pbWebCamera.setObjectName("pbWebCamera")
        self.gridLayout_4.addWidget(self.pbWebCamera, 0, 0, 1, 1)
        self.pbScreen = QtWidgets.QPushButton(self.groupBox_3)
        self.pbScreen.setObjectName("pbScreen")
        self.gridLayout_4.addWidget(self.pbScreen, 1, 0, 1, 1)
        self.gridLayout_2.addWidget(self.groupBox_3, 0, 1, 1, 2)
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setMaximumSize(QtCore.QSize(250, 16777215))
        self.groupBox_5.setObjectName("groupBox_5")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.groupBox_5)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.leX2 = QtWidgets.QLineEdit(self.groupBox_5)
        self.leX2.setMaximumSize(QtCore.QSize(100, 16777215))
        self.leX2.setObjectName("leX2")
        self.gridLayout_6.addWidget(self.leX2, 0, 3, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.groupBox_5)
        self.label_4.setObjectName("label_4")
        self.gridLayout_6.addWidget(self.label_4, 0, 0, 1, 1, QtCore.Qt.AlignRight)
        self.label_5 = QtWidgets.QLabel(self.groupBox_5)
        self.label_5.setObjectName("label_5")
        self.gridLayout_6.addWidget(self.label_5, 1, 0, 1, 1, QtCore.Qt.AlignRight)
        self.leX1 = QtWidgets.QLineEdit(self.groupBox_5)
        self.leX1.setMaximumSize(QtCore.QSize(100, 16777215))
        self.leX1.setObjectName("leX1")
        self.gridLayout_6.addWidget(self.leX1, 0, 1, 1, 1)
        self.leY1 = QtWidgets.QLineEdit(self.groupBox_5)
        self.leY1.setMaximumSize(QtCore.QSize(100, 16777215))
        self.leY1.setObjectName("leY1")
        self.gridLayout_6.addWidget(self.leY1, 1, 1, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.groupBox_5)
        self.label_7.setObjectName("label_7")
        self.gridLayout_6.addWidget(self.label_7, 0, 2, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.groupBox_5)
        self.label_6.setObjectName("label_6")
        self.gridLayout_6.addWidget(self.label_6, 1, 2, 1, 1)
        self.leY2 = QtWidgets.QLineEdit(self.groupBox_5)
        self.leY2.setMaximumSize(QtCore.QSize(100, 16777215))
        self.leY2.setObjectName("leY2")
        self.gridLayout_6.addWidget(self.leY2, 1, 3, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.groupBox_5)
        self.label_8.setObjectName("label_8")
        self.gridLayout_6.addWidget(self.label_8, 0, 4, 1, 1)
        self.leFat = QtWidgets.QLineEdit(self.groupBox_5)
        self.leFat.setMaximumSize(QtCore.QSize(100, 16777215))
        self.leFat.setObjectName("leFat")
        self.gridLayout_6.addWidget(self.leFat, 0, 5, 1, 1)
        self.pbDraw = QtWidgets.QPushButton(self.groupBox_5)
        self.pbDraw.setObjectName("pbDraw")
        self.gridLayout_6.addWidget(self.pbDraw, 1, 4, 1, 2)
        self.gridLayout_2.addWidget(self.groupBox_5, 0, 5, 1, 1)
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setMinimumSize(QtCore.QSize(0, 100))
        self.groupBox_4.setObjectName("groupBox_4")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.groupBox_4)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.vsYarkost = QtWidgets.QSlider(self.groupBox_4)
        self.vsYarkost.setMinimum(1)
        self.vsYarkost.setMaximum(100)
        self.vsYarkost.setOrientation(QtCore.Qt.Vertical)
        self.vsYarkost.setObjectName("vsYarkost")
        self.gridLayout_5.addWidget(self.vsYarkost, 0, 0, 1, 1)
        self.gridLayout_2.addWidget(self.groupBox_4, 1, 1, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setObjectName("groupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.rbBlue = QtWidgets.QRadioButton(self.groupBox)
        self.rbBlue.setObjectName("rbBlue")
        self.gridLayout.addWidget(self.rbBlue, 3, 0, 1, 1)
        self.rbGreen = QtWidgets.QRadioButton(self.groupBox)
        self.rbGreen.setObjectName("rbGreen")
        self.gridLayout.addWidget(self.rbGreen, 2, 0, 1, 1)
        self.pbAcceptChanel = QtWidgets.QPushButton(self.groupBox)
        self.pbAcceptChanel.setObjectName("pbAcceptChanel")
        self.gridLayout.addWidget(self.pbAcceptChanel, 4, 0, 1, 1)
        self.rbRed = QtWidgets.QRadioButton(self.groupBox)
        self.rbRed.setChecked(True)
        self.rbRed.setObjectName("rbRed")
        self.gridLayout.addWidget(self.rbRed, 1, 0, 1, 1)
        self.gridLayout_2.addWidget(self.groupBox, 2, 1, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setText("")
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 1, 2, 2, 4)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 712, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

####################################################################################################
        regex1 = QRegExp("[0-9]{3}")                                # правило валидатора
        validX1 = QRegExpValidator(regex1, self.leX1)               # валидатор1
        validX2 = QRegExpValidator(regex1, self.leX2)               # валидатор2
        validY1 = QRegExpValidator(regex1, self.leY1)               # валидатор3
        validY2 = QRegExpValidator(regex1, self.leY2)               # валидатор4
        validFat = QRegExpValidator(regex1, self.leFat)             # валидатор5
        validWidth = QRegExpValidator(regex1, self.lineEdit)        # валидатор6
        validHeight = QRegExpValidator(regex1, self.lineEdit_2)     # валидатор7
        self.leX1.setValidator(validX1)             # установка валидатора в lineEdit
        self.leX2.setValidator(validX2)             # установка валидатора в lineEdit
        self.leY1.setValidator(validY1)             # установка валидатора в lineEdit
        self.leY2.setValidator(validY2)             # установка валидатора в lineEdit
        self.leFat.setValidator(validFat)           # установка валидатора в lineEdit
        self.lineEdit.setValidator(validWidth)      # установка валидатора в lineEdit
        self.lineEdit_2.setValidator(validHeight)   # установка валидатора в lineEdit

        # подсказки на lineEdits
        self.leX1.setToolTip("указывать диапазон от 0 до 999")
        self.leX2.setToolTip("указывать диапазон от 0 до 999")
        self.leY1.setToolTip("указывать диапазон от 0 до 999")
        self.leY2.setToolTip("указывать диапазон от 0 до 999")
        self.leFat.setToolTip("указывать диапазон от 0 до 999")
        self.lineEdit.setToolTip("указывать диапазон от 0 до 999")
        self.lineEdit_2.setToolTip("указывать диапазон от 0 до 999")

        self.UpdateConnection()
        self.path = "ek.jpg"
        img = cv2.imread(self.path)
        self.imgW = 500
        self.imgH = 500
        self.tmpPic = img
        self.SetPictureFromRead(img)

        self.screen = False

    def UpdateConnection(self):
        self.pbDraw.clicked.connect(self.DrawLine)
        self.pbImage.clicked.connect(self.OpenImage)
        self.pbScreen.clicked.connect(self.GetScreen)
        self.pbAcceptChanel.clicked.connect(self.GetChannel)
        self.pbChangeImage.clicked.connect(self.ChangeImageSize)
        self.pbWebCamera.clicked.connect(self.StartWebCamera)
        self.vsYarkost.valueChanged.connect(self.ChangeBright)

    def SetPictureFromRead(self, img):      #вот когда картинка прочитана, тогда вызываем эту функцию для вывода
        rgb_image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        rgb_image = cv2.resize(rgb_image, (self.imgW, self.imgH))
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        self.label.setPixmap(QPixmap.fromImage(convert_to_Qt_format))
        self.tmpPic = img
    def DrawLine(self): #рисует линию по координатам
        img = self.tmpPic
        img = cv2.line(img, (int(self.leX1.text()), int(self.leY1.text())), (int(self.leX2.text()), int(self.leY2.text())), (0, 128, 0), int(self.leFat.text()))
        self.SetImage(img)

    def ChangeBright(self):
        hsv = cv2.cvtColor(self.tmpPic, cv2.COLOR_BGR2HSV)
        hsv = cv2.resize(hsv, (self.label.pixmap().width(), self.label.pixmap().height()))
        h, s, v = cv2.split(hsv)
        lim = 255 - self.vsYarkost.value()
        v[v > lim] = 255
        v[v <= lim] += self.vsYarkost.value()
        final_hsv = cv2.merge((h, s, v))
        image = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)

        image = cv2.resize(image, (self.label.pixmap().width(), self.label.pixmap().height()))
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(image))
    def OpenImage(self): #открывает картинку по выбору пользователя
        file, check = QFileDialog.getOpenFileName(None, "Open Image",
                                                  "", "JPEG Files (*.jpg);;PNG Files (*.png)")
        if check:
            self.path = file
            image = cv2.imread(file)
            self.tmpPic = image
            self.imgH = 500
            self.imgW = 500
            self.SetPictureFromRead(image)
    def GetScreen(self): #Делает снимок с вебкамеры
        self.screen = True

    def SetImage(self, image):
        rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        rgb_image = cv2.resize(rgb_image, (self.imgW, self.imgH))
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        self.label.setPixmap(QPixmap.fromImage(convert_to_Qt_format))
    def GetChannel(self): #отображает красный/зеленый/синий канал
        image = self.tmpPic
        if self.rbRed.isChecked():
            self.SetImage(image[:, :, 0])
        if self.rbGreen.isChecked():
            self.SetImage(image[:, :, 1])
        if self.rbBlue.isChecked():
            self.SetImage(image[:, :, 2])

    def ChangeImageSize(self):  #меняет размер изображения
        if self.lineEdit.text() and self.lineEdit_2.text():
            self.imgH = int(self.lineEdit.text())
            self.imgW = int(self.lineEdit_2.text())
            self.SetPictureFromRead(self.tmpPic)
    def StartWebCamera(self):   #стартует трансяцию с камеры
        self.screen = False
        cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        cap.set(cv2.CAP_PROP_FPS, 24)

        while True:
            ret, frame = cap.read()
            if ret:
                self.SetImage(frame)
                if cv2.waitKey(1) & self.screen:
                    self.tmpPic = frame
                    self.path = "screen.jpg"
                    img_name = self.path
                    cv2.imwrite(img_name, frame)
                    break

        cap.release()
        cv2.destroyAllWindows()

    def MessageBoxShow(self, kek):
        msg_box_name = QMessageBox()
        msg_box_name.setIcon(QMessageBox.Information)
        msg_box_name.setText(kek)
        msg_box_name.setStandardButtons(QMessageBox.Ok)
        msg_box_name.exec_()

####################################################################################################
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Картинка"))
        self.label_3.setText(_translate("MainWindow", "Ширина"))
        self.label_2.setText(_translate("MainWindow", "Высота"))
        self.pbChangeImage.setText(_translate("MainWindow", "Изменить картинку"))
        self.pbImage.setText(_translate("MainWindow", "Выбрать картинку"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Вебкамера"))
        self.pbWebCamera.setText(_translate("MainWindow", "Веб камера"))
        self.pbScreen.setText(_translate("MainWindow", "Сделать снимок"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Нарисовать линию"))
        self.label_4.setText(_translate("MainWindow", "Х1"))
        self.label_5.setText(_translate("MainWindow", "У1"))
        self.label_7.setText(_translate("MainWindow", "X2"))
        self.label_6.setText(_translate("MainWindow", "Y2"))
        self.label_8.setText(_translate("MainWindow", "толщ."))
        self.pbDraw.setText(_translate("MainWindow", "Нарисовать"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Яркость"))
        self.groupBox.setTitle(_translate("MainWindow", "Выбрать каналы"))
        self.rbBlue.setText(_translate("MainWindow", "Blue"))
        self.rbGreen.setText(_translate("MainWindow", "Green"))
        self.pbAcceptChanel.setText(_translate("MainWindow", "Применить"))
        self.rbRed.setText(_translate("MainWindow", "Red"))

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())